<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Faber Howden&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lo-ol.cc/"/>
  <updated>2017-03-22T16:19:59.000Z</updated>
  <id>http://lo-ol.cc/</id>
  
  <author>
    <name>Faber Howden</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用cocoapods创建公开的第三方库</title>
    <link href="http://lo-ol.cc/2017/03/23/cocoapods-public/"/>
    <id>http://lo-ol.cc/2017/03/23/cocoapods-public/</id>
    <published>2017-03-22T16:16:22.000Z</published>
    <updated>2017-03-22T16:19:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过了解使用cocopods创建私有库，可以知道，如果我们要创建私有库，其实就是将自己的库文件放在开源的github上<a id="more"></a>， 然后将我们的podspec文件，添加进cocopods的master文件夹内。</p>
<p>新版的cocopods，其团队开发了trunk服务，主要功能就是为了防止个人的pod被其他人更改。</p>
<h2 id="1、注册trunk"><a href="#1、注册trunk" class="headerlink" title="1、注册trunk"></a>1、注册trunk</h2><p>想要把我们自己的podspec文件放进master，首先要注册trunk！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod trunk register youremail@mail.com &apos;用户名&apos; --description=&apos;myMac&apos; --verbose</div></pre></td></tr></table></figure>
<p>description一般我们会加上当前电脑的标示。<br>[–verbose]可以输入详细的debug信息，方便出错时查看。</p>
<p>注册后，cocopods会向你的邮箱发送验证连接，点击后就注册成功了。<br>可以使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod trunk me</div></pre></td></tr></table></figure>
<p>命令查看注册信息。</p>
<h2 id="2、创建工程"><a href="#2、创建工程" class="headerlink" title="2、创建工程"></a>2、创建工程</h2><p>第二步就是我们创建工程，以及创建podspec文件，当然开源的话，就是要把我们创建的工程上传到github，<em>不要忘记打上与版本对应的tag</em></p>
<h2 id="3、上传podspec文件到master"><a href="#3、上传podspec文件到master" class="headerlink" title="3、上传podspec文件到master"></a>3、上传podspec文件到master</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod trunk push 项目名.podspec</div></pre></td></tr></table></figure>
<p>这条命令做了三件事情<br>1、验证你本地的podspec文件<br>2、上传你的podspec文件到trunk<br>3、将你的podspec文件转换成trunk需要的json文件</p>
<p>成功之后我们的第三方库就做成了，cocopods会在Twitter上@你，如果你添加了Twitter账户的话。</p>
<p>上传trunk成功之后，我们本地的cocopods还没有更新，执行【pod setup】吧</p>
<h2 id="4、将其他人加入到你的pod一起开发"><a href="#4、将其他人加入到你的pod一起开发" class="headerlink" title="4、将其他人加入到你的pod一起开发"></a>4、将其他人加入到你的pod一起开发</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod trunk add-owner 项目名 他人用户邮箱</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过了解使用cocopods创建私有库，可以知道，如果我们要创建私有库，其实就是将自己的库文件放在开源的github上
    
    </summary>
    
      <category term="开发" scheme="http://lo-ol.cc/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="cocoaPods" scheme="http://lo-ol.cc/tags/cocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>关于升级macOS无任何来源的问题</title>
    <link href="http://lo-ol.cc/2016/11/29/%E5%85%B3%E4%BA%8E%E5%8D%87%E7%BA%A7macOS%E6%97%A0%E4%BB%BB%E4%BD%95%E6%9D%A5%E6%BA%90%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://lo-ol.cc/2016/11/29/关于升级macOS无任何来源的问题/</id>
    <published>2016-11-29T07:26:32.000Z</published>
    <updated>2017-03-22T16:05:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 macOS Sieria (10.12)中，系统隐藏掉了任何来源，解决办法：<br><a id="more"></a></p>
<p>打开终端，执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo spctl --master-disable</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 macOS Sieria (10.12)中，系统隐藏掉了任何来源，解决办法：&lt;br&gt;
    
    </summary>
    
    
      <category term="os" scheme="http://lo-ol.cc/tags/os/"/>
    
  </entry>
  
  <entry>
    <title>使用Cocoapods创建私有仓库</title>
    <link href="http://lo-ol.cc/2016/08/14/%E4%BD%BF%E7%94%A8Cocoapods%E5%88%9B%E5%BB%BA%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/"/>
    <id>http://lo-ol.cc/2016/08/14/使用Cocoapods创建私有仓库/</id>
    <published>2016-08-14T01:47:13.000Z</published>
    <updated>2017-03-22T16:04:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>Cocoapods最强大的功能就是自己创建podspec，让我们可以设置私有的库。</p>
<a id="more"></a>
<h2 id="1、什么是podspecs"><a href="#1、什么是podspecs" class="headerlink" title="1、什么是podspecs"></a>1、什么是podspecs</h2><p>podspecs是所有Pods的一个索引，即是一个装了所有公开的第三方库的索引的一个容器。<br>当我们在安装pod时，就已经将这个容器clone到了本地。具体位置在</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/.cocoapods/repos</div></pre></td></tr></table></figure>
<p>目录下。其中/master文件夹中便是一个所有公开第三方库的索引。打开这个文件夹，我们就可以看到我们常用的各种第三方库的索引，都在这里。</p>
<p>当我们每次执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod search &apos;somelibrary&apos;</div></pre></td></tr></table></figure>
<p>这样的操作时，其实就是在master文件夹下去搜索相应的库的索引。这也就是有时候，我们没有及时更新pod的版本时，有的第三方库的最新版本我们无法搜索到的原因。</p>
<p>因此，如果要创建私有库，首先要创建一个自己的类似于<strong>msater</strong>的索引库–podspecs。</p>
<p>添加命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod repo add cocoapods-specs https://git.cimyun.com/ict/cocoapods-specs.git</div></pre></td></tr></table></figure>
<p>其中<em>cocoapods-specs</em>就是我们自己添加的私有库的文件夹，与<em>master</em>在同级目录下，后面为我们保存的specs的git仓库</p>
<p>创建完成之后，进入到~/.cocoapods/repos目录下，就可以看到我们创建的cocoapods-specs。</p>
<p><em>当然这个仓库已经创建完成。所以可以直接将其从git clone到~/.cocoapods/repos目录下。然后在执行pod search时，就可以搜索到里面所有的私有库了</em></p>
<h2 id="2、创建自己的工程文件"><a href="#2、创建自己的工程文件" class="headerlink" title="2、创建自己的工程文件"></a>2、创建自己的工程文件</h2><p>创建私有库工程文件，cocoapods提供了一个很方便的工具。具体介绍在<a href="http://guides.cocoapods.org/making/using-pod-lib-create" target="_blank" rel="external">这里</a></p>
<p>使用方法，首先进入一个存放工程的目录下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod lib create CIMProgressHUD</div></pre></td></tr></table></figure>
<p>cocoapods会将自己的模板克隆下来，然后有一个创建一个什么样的工程问题索引。</p>
<p>5个问题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">What language do you want to use?? [ Swift / ObjC ]</div><div class="line"> &gt;</div><div class="line"> Would you like to include a demo application with your library? [ Yes / No ]</div><div class="line"> &gt;</div><div class="line"> Which testing frameworks will you use? [ Specta / Kiwi / None ]</div><div class="line"> &gt;</div><div class="line"> Would you like to do view based testing? [ Yes / No ]</div><div class="line"> &gt;</div><div class="line"> What is your class prefix?</div><div class="line"> &gt;</div></pre></td></tr></table></figure>
<p>1、工程要使用什么语言？2、是否需要一个例子工程？3、选择一个测试框架。4是否基于view的测试。5、类名前缀用什么。回答完之后，它会自动创建工程，并且自动执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod install</div></pre></td></tr></table></figure>
<p>工程创建完成，自动打开。</p>
<p>接下来就是向pod文件夹中添加库文件以及资源了，并且配置podspec文件。在pod/CIMProgressHUD/classes文件夹中，可以看到replaceme.m文件。这便是模板工程，提醒，我们将代码文件存放着这里。其他关于图片，xib等资源文件可以存放在Asset文件夹，或者自己随意放在哪里都好，但是需要注意的是，在编写podspec文件时，需要将所有资源文件的存放路径，编写正确。</p>
<p><strong><em>注意：向pod中添加了新文件或者更新了podspec版本之后，都需要执行一次pod update命令</em></strong></p>
<h2 id="3、编写podspec文件"><a href="#3、编写podspec文件" class="headerlink" title="3、编写podspec文件"></a>3、编写podspec文件</h2><p>在我们使用pod创建的工程中，podspec文件已经创建好，在目录Podspec Metadata下，便可以看到podspec文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"> #</div><div class="line"> # Be sure to run `pod lib lint CIMProgressHUD.podspec&apos; to ensure this is a</div><div class="line"> # valid spec before submitting.</div><div class="line">#</div><div class="line"> # Any lines starting with a # are optional, but their use is encouraged</div><div class="line"> # To learn more about a Podspec see http://guides.cocoapods.org/syntax/podspec.html</div><div class="line">#</div><div class="line"></div><div class="line">Pod::Spec.new do |s|</div><div class="line">  s.name             = &apos;CIMProgressHUD&apos;</div><div class="line">  s.version          = &apos;1.0.0&apos;</div><div class="line">  s.summary          = &apos;希盟自定制加载指示器&apos;</div><div class="line"></div><div class="line"></div><div class="line">  s.description      = &lt;&lt;-DESC</div><div class="line">这里可以添加描述，支持MarkDown</div><div class="line">DESC</div><div class="line"></div><div class="line">  s.homepage         = &apos;https://git.cimyun.com/ict/CIMProgressHUD&apos;</div><div class="line">  # s.screenshots     = &apos;www.example.com/screenshots_1&apos;, &apos;www.example.com/screenshots_2&apos;</div><div class="line">  s.license          = &#123; :type =&gt; &apos;MIT&apos;, :file =&gt; &apos;LICENSE&apos; &#125;</div><div class="line">  s.author           = &#123; &apos;iCalabash&apos; =&gt; &apos;magifend@163.com&apos; &#125;</div><div class="line">  s.source           = &#123; :git =&gt; &apos;https://git.cimyun.com/ict/CIMProgressHUD.git&apos;, :tag =&gt; s.version.to_s &#125;</div><div class="line">  # s.social_media_url = &apos;https://twitter.com/&lt;TWITTER_USERNAME&gt;&apos;</div><div class="line"></div><div class="line">  s.ios.deployment_target = &apos;8.0&apos;</div><div class="line"></div><div class="line">  # 这里是项目文件的路径</div><div class="line">  s.source_files = &apos;CIMProgressHUD/Classes/*&apos;</div><div class="line">  </div><div class="line">  # 这里存放资源文件 图片 xib storyboard等</div><div class="line">   s.resource_bundles = &#123;</div><div class="line">     &apos;CIMProgressHUD&apos; =&gt; [&apos;CIMProgressHUD/Assets/*.png&apos;]</div><div class="line">   &#125;</div><div class="line"></div><div class="line">  # s.public_header_files = &apos;Pod/Classes/**/*.h&apos;</div><div class="line">  # s.frameworks = &apos;UIKit&apos;, &apos;MapKit&apos;</div><div class="line">  # 是否有依赖库</div><div class="line">  # s.dependency &apos;AFNetworking&apos;, &apos;~&gt; 2.3&apos;</div><div class="line">end</div></pre></td></tr></table></figure>
<p>由</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s.source           = &#123; :git =&gt; &apos;https://git.cimyun.com/ict/CIMProgressHUD.git&apos;, :tag =&gt; s.version.to_s &#125;</div></pre></td></tr></table></figure>
<p><strong>可以看到，cocopods的版本号是依据与版本号对应的tag去git仓库寻找的资源文件，因此我们在上传git时，必须打上与版本号对应的tag</strong></p>
<p>编辑完podspec文件后，需要验证一下这个文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod lib lint</div></pre></td></tr></table></figure>
<p>当看到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">passed validation</div></pre></td></tr></table></figure>
<p>时，说明验证通过。</p>
<h3 id="将项目push到远程仓库"><a href="#将项目push到远程仓库" class="headerlink" title="将项目push到远程仓库"></a>将项目push到远程仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git add .</div><div class="line">$ git commit -s -m &quot;Initial Commit of Library&quot;</div><div class="line">$ git remote add origin git@git.cimyun.com:ict/CIMProgressHUD.git           #添加远端仓库</div><div class="line">$ git push origin master     #提交到远端仓库</div></pre></td></tr></table></figure>
<p>不要忘记打上与版本号对应的tag</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git tag -m &quot;first release&quot; 1.0.0</div><div class="line">$ git push --tags     #推送tag到远端仓库</div></pre></td></tr></table></figure>
<h2 id="4、已有工程创建podspec文件"><a href="#4、已有工程创建podspec文件" class="headerlink" title="4、已有工程创建podspec文件"></a>4、已有工程创建podspec文件</h2><p>如果不想使用cocopods创建的模板工程，我们也可以在现有工程中，创建podspec文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod spec create [工程名] [工程git地址]</div></pre></td></tr></table></figure>
<p>执行完之后，就在项目中创建了一个podspec文件，然后按第三步中的方法，进行编辑，验证就ok</p>
<h2 id="5、本地测试podspec文件"><a href="#5、本地测试podspec文件" class="headerlink" title="5、本地测试podspec文件"></a>5、本地测试podspec文件</h2><p>新建一个使用cocopods的测试工程，在Podfile中添加</p>
<p>指定路径</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod &apos;CIMProgerssHUD&apos;, :path =&gt; &apos;~/**/CIMProgressHUD&apos;</div></pre></td></tr></table></figure>
<p>或者指定podspec</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod &apos;CIMProgerssHUD&apos;, :podspec =&gt; &apos;~/**/CIMProgressHUD/CIMProgressHUD.podspec&apos;</div></pre></td></tr></table></figure>
<p>然后执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod install</div></pre></td></tr></table></figure>
<p>打开项目工程，可以看到库文件都被加载到Pods子项目中了，不过它们并没有在Pods目录下，而是跟测试项目一样存在于Development Pods/PodTestLibrary中，这是因为我们是在本地测试，而没有把podspec文件添加到Spec Repo中的缘故</p>
<h2 id="6、向cocoapods-specs中提交podspec文件"><a href="#6、向cocoapods-specs中提交podspec文件" class="headerlink" title="6、向cocoapods-specs中提交podspec文件"></a><strong>6、向cocoapods-specs中提交podspec文件</strong></h2><p>当验证podspec文件无误后，需要将其提交到私有的cocopods-specs文件夹中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod repo push cocoapods-specs CIMProgressHUD.podspec</div></pre></td></tr></table></figure>
<p>完成之后，这个组件就添加到我们私有的cocoapods-specs中了，进入到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/.cocoapods/repos/cocoapods-specs</div></pre></td></tr></table></figure></p>
<p>目录中就可以看到CIMProgressHUD的文件夹，同时这个命令也将其push到了远程git仓库</p>
<p>这时我们再使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod search CIMProgressHUD</div></pre></td></tr></table></figure>
<p>就可以像搜索其他第三方库一样的搜索到了。</p>
<h2 id="7、使用私有库"><a href="#7、使用私有库" class="headerlink" title="7、使用私有库"></a>7、使用私有库</h2><p>使用私有库的方式我在这里主要列举了两种情况，下面针对这两中情况的具体注意项我这里稍微说明一下。 第一种,正常使用私有库的情况，即在Podfile中引用私有库 这种方式最简单，就是通过在Podfile开头列举说所有私有库的位置以及Cocoapods位置即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Podfile文件</div><div class="line"># 公有仓库</div><div class="line">source &apos;https://github.com/CocoaPods/Specs.git&apos;  </div><div class="line"># 私有仓库</div><div class="line">source &apos;https://git.cimyun.com/ict/cocoapods-specs.git&apos;</div></pre></td></tr></table></figure>
<p>第二种，在私有库中引用私有库，即在Podspec文件中依赖(dependency)私有库 这种情况就比较麻烦一点，因为毕竟Podspec文件中并没有指明私有仓库地址的地方。那么肯定就不在Podspec文件里面指明私有仓库的地方。而是在验证和上传私有库的时候进行指明。即在下面这两条命令中进行指明：pod lib lint 项目名.podspec –sources=<a href="https://github.com/CocoaPods/Specs.git,https://git.cimyun.com/ict/cocoapods-specs.git以及pod" target="_blank" rel="external">https://github.com/CocoaPods/Specs.git,https://git.cimyun.com/ict/cocoapods-specs.git以及pod</a> repo push –source=<a href="https://github.com/CocoaPods/Specs.git,https://git.cimyun.com/ict/cocoapods-specs.git,要不然你在检验项目以及提交项目过程中就会出现Error的情况。" target="_blank" rel="external">https://github.com/CocoaPods/Specs.git,https://git.cimyun.com/ict/cocoapods-specs.git,要不然你在检验项目以及提交项目过程中就会出现Error的情况。</a></p>
<p>但是这两种情况还是有点不同的，第一种情况是可以采用开发者模式，而第二种情况不能采用开发者模式，只能通过打tag之后才能进行使用，所以在使用第二种情况下最好是测试好之后打完tag再进行引用。</p>
<h2 id="8、关于资源文件的问题"><a href="#8、关于资源文件的问题" class="headerlink" title="8、关于资源文件的问题"></a>8、关于资源文件的问题</h2><p>由于使用者在使用cocopods中，可能涉及到swift与Objective-C混编的问题，所以我们的私有库文件可能被编为静态库，也有可能被编为动态库，这就容易导致，我们在自己的私有库文件中引用资源文件会找不到。</p>
<p>新版的cocoapods，引用图片，xib，stroyboard等资源文件建议使用类似</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">NSBundle *bundle = [NSBundle bundleWithPath:[[NSBundle bundleForClass:[self class]]</div><div class="line">                                                 pathForResource:@&quot;CIMProgressHUD&quot;</div><div class="line">                                                 ofType:@&quot;bundle&quot;]];</div><div class="line">    UIImage * successImage = [UIImage imageNamed:HUD_IMAGE_SUCCESS inBundle:bundle compatibleWithTraitCollection:nil];</div></pre></td></tr></table></figure>
<p>这样的形式</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Cocoapods最强大的功能就是自己创建podspec，让我们可以设置私有的库。&lt;/p&gt;
    
    </summary>
    
      <category term="开发" scheme="http://lo-ol.cc/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="cocoaPods" scheme="http://lo-ol.cc/tags/cocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>git常用命令总结</title>
    <link href="http://lo-ol.cc/2016/06/17/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>http://lo-ol.cc/2016/06/17/git常用命令总结/</id>
    <published>2016-06-17T03:54:42.000Z</published>
    <updated>2017-03-22T16:06:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>总结下git常用命令</p>
<a id="more"></a>
<p>####### [注：其中feature/…格式为本地分支名  origin/featue/…为远程分支名]</p>
<ul>
<li>列出本地分支</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch</div></pre></td></tr></table></figure>
<ul>
<li>列出所有远程分支</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch -r</div></pre></td></tr></table></figure>
<!--more-->
<ul>
<li>列出所有本地分支和远程分支</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch -a</div></pre></td></tr></table></figure>
<ul>
<li>新建一个分支，但依然停留在当前分支</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch feature/xxxx</div></pre></td></tr></table></figure>
<ul>
<li>新建一个分支，但依然停留在当前分支</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch feature/yyyy</div></pre></td></tr></table></figure>
<ul>
<li>新建一个分支，并切换到该分支</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch -b feature/yyyy</div></pre></td></tr></table></figure>
<ul>
<li>检出远程分支(此命令在本地建立了 一个远程同名分支，并且与其建立了追踪关系)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b feature/xxxx origin/feature/xxxx</div></pre></td></tr></table></figure>
<ul>
<li>新建一个分支，与指定的远程分支建立追踪关系</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch --track feature/yyyy origin/feature/xxxx</div></pre></td></tr></table></figure>
<ul>
<li>在某个远程分支的基础上，创建一个新的本地分支</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b feature/zzzz origin/master</div></pre></td></tr></table></figure>
<ul>
<li>在本地分支上合并远程分支</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git merge origin/master</div><div class="line">或者</div><div class="line">$ git rebase origin/master</div></pre></td></tr></table></figure>
<ul>
<li>切换到指定分支，并更新工作区</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout feature/yyyy</div></pre></td></tr></table></figure>
<ul>
<li>切换到上一个分支</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -</div></pre></td></tr></table></figure>
<ul>
<li>将现有本地分支与指定的远程分支间建立追踪关系</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch --set-upstream-to origin/feature/xxxx  feature/yyyy</div></pre></td></tr></table></figure>
<ul>
<li>合并指定分支到当前分支</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git merge feature/zzzz</div></pre></td></tr></table></figure>
<ul>
<li>选择一个commit，合并到当前分支</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git cherry-pick [commit]</div></pre></td></tr></table></figure>
<ul>
<li>删除分支</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch -d feature/zzzz</div></pre></td></tr></table></figure>
<ul>
<li>删除远程分支</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin --delete feature/zzzz</div></pre></td></tr></table></figure>
<ul>
<li>将本地分支 推送到远程分支</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push feature/zzzz:origin/master</div></pre></td></tr></table></figure>
<ul>
<li>如果省略远程分支名，则表示本地分支与远程存在追踪关系，但是如果不存在，则会新建，如下<br>将本地的某个分支推送到远程的同名分支上，如果远程不存在，则会新建</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin feature/zzzz</div></pre></td></tr></table></figure>
<ul>
<li>如果省略本地分支名，则表示推送一个空的分支到远程分支，即要删除远程分支，如下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git push origin :master</div><div class="line">等同于</div><div class="line">$ git push origin --delete master</div></pre></td></tr></table></figure>
<ul>
<li>不管远程是否存在对应的分支，都要将本地所有的分支都推送到远程 </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push --alll origin</div></pre></td></tr></table></figure>
<h4 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h4><ul>
<li><p>列出所有tag</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag</div></pre></td></tr></table></figure>
</li>
<li><p>新建一个tag在当前commit</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag [tag]</div></pre></td></tr></table></figure>
</li>
<li><p>新建一个tag在指定commit</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag [tag] [commit]</div></pre></td></tr></table></figure>
</li>
<li><p>删除本地tag</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag -d [tag]</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>删除远程tag</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin :refs/tags/[tagName]</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>查看tag信息</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git show [tag]</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>提交指定tag</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push [remote] [tag]</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>提交所有tag</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push [remote] --tags</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>新建一个分支，指向某个tag</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b [branch] [tag]</div></pre></td></tr></table></figure>
</li>
<li><p>git push 不会推送标签，除非使用–tags</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin --tags</div></pre></td></tr></table></figure>
<p><strong>Warning: Permanently added the RSA host key for IP address ‘192.30.253.112’ to the list of known hosts.解决方案</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/hosts</div></pre></td></tr></table></figure></p>
<p>然后添加如下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">192.30.253.112 github.com</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结下git常用命令&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://lo-ol.cc/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>优秀网站收藏</title>
    <link href="http://lo-ol.cc/2016/03/28/%E4%BC%98%E7%A7%80%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/"/>
    <id>http://lo-ol.cc/2016/03/28/优秀网站收藏/</id>
    <published>2016-03-28T09:21:06.000Z</published>
    <updated>2017-03-22T16:29:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>整理下收藏的优秀网站</p>
<a id="more"></a>
<h1 id="开发篇"><a href="#开发篇" class="headerlink" title="开发篇"></a>开发篇</h1><h3 id="iOS学习资料大整理"><a href="#iOS学习资料大整理" class="headerlink" title="iOS学习资料大整理"></a><a href="https://github.com/Aufree/trip-to-iOS" target="_blank" rel="external">iOS学习资料大整理</a></h3><h3 id="开源项目以及学习资料总结-好多好多…"><a href="#开源项目以及学习资料总结-好多好多…" class="headerlink" title="开源项目以及学习资料总结(好多好多…)"></a><a href="https://github.com/Tim9Liu9/TimLiu-iOS" target="_blank" rel="external">开源项目以及学习资料总结(好多好多…)</a></h3><h3 id="GitHub前50名的Objective-C网络相关库"><a href="#GitHub前50名的Objective-C网络相关库" class="headerlink" title="GitHub前50名的Objective-C网络相关库"></a><a href="https://github.com/coderyi/blog/blob/master/articles/2015/1108_Network_Rep_Ranking.md" target="_blank" rel="external">GitHub前50名的Objective-C网络相关库</a></h3><h3 id="一堆动画"><a href="#一堆动画" class="headerlink" title="一堆动画"></a><a href="https://github.com/YouXianMing/YoCelsius" target="_blank" rel="external">一堆动画</a></h3><h3 id="开源iOSAPPs"><a href="#开源iOSAPPs" class="headerlink" title="开源iOSAPPs"></a><a href="https://github.com/dkhamsing/open-source-ios-apps" target="_blank" rel="external">开源iOSAPPs</a></h3><h3 id="OC主题站"><a href="#OC主题站" class="headerlink" title="OC主题站"></a><a href="https://www.objc.io/" target="_blank" rel="external">OC主题站</a></h3><p>中文版可以看这里<a href="http://www.objccn.io/" target="_blank" rel="external">objc中国</a></p>
<h3 id="designcode"><a href="#designcode" class="headerlink" title="designcode"></a><a href="https://designcode.io/" target="_blank" rel="external">designcode</a></h3><p><img src="http://7xr7f9.com1.z0.glb.clouddn.com/leancode2016-03-29.png" alt=""><br>想学sketch+iOS开发的可以入手一套正版教材，一个华裔大神的网站。</p>
<h3 id="cocoachina"><a href="#cocoachina" class="headerlink" title="cocoachina"></a><a href="http://www.cocoachina.com/" target="_blank" rel="external">cocoachina</a></h3><h3 id="code4app"><a href="#code4app" class="headerlink" title="code4app"></a><a href="http://www.code4app.com/" target="_blank" rel="external">code4app</a></h3><h3 id="github-stackoverflow"><a href="#github-stackoverflow" class="headerlink" title="github stackoverflow"></a><a href="http://github.com" target="_blank" rel="external">github</a> <a href="http://www.stackoverflow.com" target="_blank" rel="external">stackoverflow</a></h3><h3 id="那些著名或非著名的iOS面试题－前编"><a href="#那些著名或非著名的iOS面试题－前编" class="headerlink" title="那些著名或非著名的iOS面试题－前编"></a><a href="http://www.jianshu.com/p/8f16613861fa?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note&amp;utm_source=qq" target="_blank" rel="external">那些著名或非著名的iOS面试题－前编</a></h3><h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><h3 id="Sketch"><a href="#Sketch" class="headerlink" title="Sketch"></a><a href="http://www.sketchapp.com/" target="_blank" rel="external">Sketch</a></h3><p>比Photoshop好用的UI设计工具<br>信息获取来源<a href="http://get.ftqq.com/3.get" target="_blank" rel="external">这里</a></p>
<p>APP icon快速生成插件<a href="https://github.com/kaphacius/IconMaker" target="_blank" rel="external">https://github.com/kaphacius/IconMaker</a></p>
<p>自动识别人脸的 imageView扩展  <a href="https://github.com/BeauNouvelle/AspectFillFaceAware" target="_blank" rel="external">https://github.com/BeauNouvelle/AspectFillFaceAware</a></p>
<h1 id="事业篇"><a href="#事业篇" class="headerlink" title="事业篇"></a>事业篇</h1><h3 id="InfoQ-："><a href="#InfoQ-：" class="headerlink" title="InfoQ ："></a><a href="http://www.infoq.com/cn/" target="_blank" rel="external">InfoQ</a> ：</h3><p>一个只专注于提供在软件开发领域可能影响变革和创新内容的技术新闻社区。</p>
<p>InfoQ每周会发布超过150篇原创文章，包括可以免费观看的来自35个国际性会议的演讲视频和由12,500多名读者们填写过的问卷调查。</p>
<h3 id="在行-："><a href="#在行-：" class="headerlink" title="在行 ："></a><a href="http://www.zaih.com/" target="_blank" rel="external">在行</a> ：</h3><p><a href="http://www.guokr.com/" target="_blank" rel="external">果壳网</a>旗下的，面向全行业的咨询网站。- 行家指路，少走弯路！</p>
<h3 id="极牛"><a href="#极牛" class="headerlink" title="极牛"></a><a href="http://geekniu.com" target="_blank" rel="external">极牛</a></h3><p>程序员版的“在行”</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a><a href="http://shixian.com" target="_blank" rel="external">实现</a></h3><p>聚焦于互联网行业工程师的兼职平台</p>
<h3 id="智城"><a href="#智城" class="headerlink" title="智城"></a><a href="http://www.taskcity.com/" target="_blank" rel="external">智城</a></h3><p>外包网</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理下收藏的优秀网站&lt;/p&gt;
    
    </summary>
    
      <category term="收藏" scheme="http://lo-ol.cc/categories/%E6%94%B6%E8%97%8F/"/>
    
    
      <category term="技术" scheme="http://lo-ol.cc/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="网站" scheme="http://lo-ol.cc/tags/%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>使用CocoaPods做依赖管理</title>
    <link href="http://lo-ol.cc/2016/03/10/%E4%BD%BF%E7%94%A8CocoaPods%E5%81%9A%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/"/>
    <id>http://lo-ol.cc/2016/03/10/使用CocoaPods做依赖管理/</id>
    <published>2016-03-10T06:57:04.000Z</published>
    <updated>2017-03-22T15:43:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>每种语言发展到一个阶段，就会出现相应的依赖管理工具。本章讲解iOS项目的依赖管理工具CocoaPods。</p>
<a id="more"></a>
<h2 id="CocoaPods简介"><a href="#CocoaPods简介" class="headerlink" title="CocoaPods简介"></a>CocoaPods简介</h2><p>每种语言发展到一个阶段，就会出现相应的依赖管理工具，例如Java语言的Maven，nodejs的npm。随着iOS开发者的增多，业界也出现了为iOS程序提供依赖管理的工具，它的名字叫做：CocoaPods。</p>
<p>CocoaPods项目的源码在Github上管理。该项目开始于2011年8月，经过多年发展，现在已经成为iOS开发事实上的依赖管理标准工具。开发iOS项目不可避免地要使用第三方开源库，CocoaPods的出现使得我们可以节省设置和更新第三方开源库的时间。</p>
<p>在我开发猿题库客户端时，使用了24个第三方开源库。在没有使用CocoaPods以前，我需要:</p>
<ul>
<li><p>把这些第三方开源库的源代码文件复制到项目中，或者设置成git的submodule。</p>
</li>
<li><p>对于这些开源库通常需要依赖系统的一些framework，我需要手工地将这些framework一一增加到项目依赖中，比如通常情况下，一个网络库就需要增加以下framework: CFNetwork, SystemConfiguration, MobileCoreServices, CoreGraphics, zlib。</p>
</li>
<li><p>对于某些开源库，我还需要设置-licucore或者 -fno-objc-arc等编译参数</p>
</li>
<li><p>管理这些依赖包的更新。</p>
</li>
</ul>
<p>这些体力活虽然简单，但毫无技术含量并且浪费时间。在使用CocoaPods之后，我只需要将用到的第三方开源库放到一个名为Podfile的文件中，然后执行pod install。CocoaPods就会自动将这些第三方开源库的源码下载下来，并且为我的工程设置好相应的系统依赖和编译参数。</p>
<h2 id="CocoaPods的安装和使用"><a href="#CocoaPods的安装和使用" class="headerlink" title="CocoaPods的安装和使用"></a>CocoaPods的安装和使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装方式异常简单, Mac下都自带ruby，使用ruby的gem命令即可下载安装：</p>
<pre><code>$ sudo gem install cocoapods

$ pod setup
</code></pre><p>如果你的gem太老，可以尝试用如下命令升级gem:</p>
<pre><code>sudo gem update --system
</code></pre><p>另外，ruby的软件源rubygems.org因为使用的亚马逊的云服务，所以被墙了，需要更新一下ruby的源，如下代码将官方的ruby源替换成ruby-china的RubyGems镜像。另外现在网上的大多数教程依然是更换成taobao的gem源，但是那个已经停止维护了。：</p>
<pre><code>gem sources --remove https://rubygems.org/

gem sources -a https://gems.ruby-china.org

gem sources -l
</code></pre><p>还有一点需要注意，pod setup在执行时，会输出Setting up CocoaPods master repo，但是会等待比较久的时间。这步其实是Cocoapods在将它的信息下载到 ~/.cocoapods目录下，如果你等太久，可以试着cd到那个目录，用du -sh *来查看下载进度。你也可以参考本文接下来的使用cocoapods的镜像索引一节的内容来提高下载速度。</p>
<h3 id="使用CocoaPods的镜像索引"><a href="#使用CocoaPods的镜像索引" class="headerlink" title="使用CocoaPods的镜像索引"></a>使用CocoaPods的镜像索引</h3><p>所有的项目的Podspec文件都托管在<a href="https://github.com/CocoaPods/Specs。第一次执行pod" target="_blank" rel="external">https://github.com/CocoaPods/Specs。第一次执行pod</a> setup时，CocoaPods会将这些podspec索引文件更新到本地的 ~/.cocoapods/目录下，这个索引文件比较大，有80M左右。所以第一次更新时非常慢，笔者就更新了将近1个小时才完成。</p>
<p>一个叫akinliu的朋友在gitcafe和oschina上建立了CocoaPods索引库的镜像，因为gitcafe和oschina都是国内的服务器，所以在执行索引更新操作时，会快很多。如下操作可以将CocoaPods设置成使用gitcafe镜像：</p>
<pre><code>pod repo remove master

pod repo add master https://gitcafe.com/akuandev/Specs.git

pod repo update
</code></pre><p>将以上代码中的 <a href="https://gitcafe.com/akuandev/Specs.git" target="_blank" rel="external">https://gitcafe.com/akuandev/Specs.git</a> 替换成 <a href="http://git.oschina.net/akuandev/Specs.git" target="_blank" rel="external">http://git.oschina.net/akuandev/Specs.git</a> 即可使用oschina上的镜像。</p>
<h3 id="使用CocoaPods"><a href="#使用CocoaPods" class="headerlink" title="使用CocoaPods"></a>使用CocoaPods</h3><p>使用时需要新建一个名为Podfile的文件，以如下格式，将依赖的库名字依次列在文件中即可</p>
<pre><code>platform :ios
pod &apos;JSONKit&apos;,      &apos;~&gt; 1.4&apos;
pod &apos;Reachability&apos;,  &apos;~&gt; 3.0.0&apos;
pod &apos;ASIHTTPRequest&apos;
pod &apos;RegexKitLite&apos;
</code></pre><p>然后你将编辑好的Podfile文件放到你的项目根目录中，执行如下命令即可：</p>
<pre><code>cd &quot;your project home&quot;pod install
</code></pre><p>现在，你的所有第三方库都已经下载完成并且设置好了编译参数和依赖，你只需要记住如下2点即可：</p>
<ul>
<li><p>使用CocoaPods生成的 .xcworkspace 文件来打开工程，而不是以前的 .xcodeproj 文件。</p>
</li>
<li><p>每次更改了Podfile文件，你需要重新执行一次pod update命令。</p>
</li>
</ul>
<h3 id="查找第三方库"><a href="#查找第三方库" class="headerlink" title="查找第三方库"></a>查找第三方库</h3><p>你如果不知道cocoaPods管理的库中，是否有你想要的库，那么你可以通过pod search命令进行查找，以下是我用pod search json查找到的所有可用的库：</p>
<pre><code>$ pod search json

-&gt; AnyJSON (0.0.1)
  Encode / Decode JSON by any means possible.
  - Homepage: https://github.com/mattt/AnyJSON
  - Source:  https://github.com/mattt/AnyJSON.git
  - Versions: 0.0.1 [master repo]

-&gt; JSONKit (1.5pre)
  A Very High Performance Objective-C JSON Library.
  - Homepage: https://github.com/johnezang/JSONKit
  - Source:  git://github.com/johnezang/JSONKit.git
  - Versions: 1.5pre, 1.4 [master repo]

// ...以下省略若干行
</code></pre><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="关于-gitignore"><a href="#关于-gitignore" class="headerlink" title="关于.gitignore"></a>关于.gitignore</h3><p>当你执行pod install之后，除了Podfile外，CocoaPods还会生成一个名为Podfile.lock的文件，你不应该把这个文件加入到.gitignore中。因为Podfile.lock会锁定当前各依赖库的版本，之后如果多次执行pod install 不会更改版本，要pod update才会改Podfile.lock了。这样多人协作的时候，可以防止第三方库升级时造成大家各自的第三方库版本不一致。</p>
<p>CocoaPods的这篇官方文档也在What is a Podfile.lock一节中介绍了Podfile.lock的作用，并且指出：</p>
<p>This file should always be kept under version control.</p>
<h3 id="为自己的项目创建podspec文件"><a href="#为自己的项目创建podspec文件" class="headerlink" title="为自己的项目创建podspec文件"></a>为自己的项目创建podspec文件</h3><p>我们可以为自己的开源项目创建podspec文件，首先通过如下命令初始化一个podspec文件：</p>
<pre><code>pod spec create your_pod_spec_name
</code></pre><p>该命令执行之后，CocoaPods会生成一个名为your_pod_spec_name.podspec的文件，然后我们修改其中的相关内容即可。</p>
<p>具体步骤可以参考这两篇博文中的相关内容：《如何编写一个CocoaPods的spec文件》 和《Cocoapods 入门》。</p>
<h3 id="使用私有的pods"><a href="#使用私有的pods" class="headerlink" title="使用私有的pods"></a>使用私有的pods</h3><p>我们可以直接指定某一个依赖的podspec，这样就可以使用公司内部的私有库。该方案有利于使企业内部的公共项目支持CocoaPods。如下是一个示例：</p>
<pre><code>pod &apos;MyCommon&apos;, :podspec =&gt; &apos;https://yuantiku.com/common/myCommon.podspec&apos;
</code></pre><h3 id="不更新podspec"><a href="#不更新podspec" class="headerlink" title="不更新podspec"></a>不更新podspec</h3><p>CocoaPods在执行pod install和pod update时，会默认先更新一次podspec索引。使用–no-repo-update参数可以禁止其做索引更新操作。如下所示：</p>
<pre><code>pod install --no-repo-update
pod update --no-repo-update
</code></pre><h3 id="生成第三方库的帮助文档"><a href="#生成第三方库的帮助文档" class="headerlink" title="生成第三方库的帮助文档"></a>生成第三方库的帮助文档</h3><p>如果你想让CococaPods帮你生成第三方库的帮助文档，并集成到Xcode中，那么用brew安装appledoc即可：</p>
<pre><code>brew install appledoc
</code></pre><p>关于appledoc，在本书的“其它工具”一章有专门介绍。它最大的优点是可以将帮助文档集成到Xcode中，这样你在敲代码的时候，按住opt键单击类名或方法名，就可以显示出相应的帮助文档。</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>CocoaPods的原理是将所有的依赖库都放到另一个名为Pods项目中，然后让主项目依赖Pods项目，这样，源码管理工作都从主项目移到了Pods项目中。发现的一些技术细节有：</p>
<ul>
<li><p>Pods项目最终会编译成一个名为libPods.a的文件，主项目只需要依赖这个.a文件即可。</p>
</li>
<li><p>对于资源文件，CocoaPods提供了一个名为Pods-resources.sh的bash脚本，该脚本在每次项目编译的时候都会执行，将第三方库的各种资源文件复制到目标目录中。</p>
</li>
<li><p>CocoaPods通过一个名为Pods.xcconfig的文件来在编译时设置所有的依赖和参数。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每种语言发展到一个阶段，就会出现相应的依赖管理工具。本章讲解iOS项目的依赖管理工具CocoaPods。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://lo-ol.cc/categories/iOS/"/>
    
      <category term="工具" scheme="http://lo-ol.cc/categories/iOS/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="CocoaPods" scheme="http://lo-ol.cc/tags/CocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>使用GithubPages-Hexo搭建免费博客（三）</title>
    <link href="http://lo-ol.cc/2016/03/02/%E4%BD%BF%E7%94%A8GithubPages-Hexo%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://lo-ol.cc/2016/03/02/使用GithubPages-Hexo搭建免费博客（三）/</id>
    <published>2016-03-02T15:52:40.000Z</published>
    <updated>2016-09-21T06:53:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h2><a id="more"></a>
<ul>
<li>域名解析<br>域名购买成功后，在解析设置中添加以下解析</li>
</ul>
<p><img src="http://7xr7f9.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-03-03%20%E4%B8%8A%E5%8D%8812.02.04.png" alt=""></p>
<p>记录类型为：A<br>主机记录分别为“@”，“wwww”。其中设置@，可以用xxx.com进行访问。设置www，可以使用www.xxx.com进行访问。<br>记录值都为 “192.30.252.153”</p>
<ul>
<li>添加CNAME文件</li>
</ul>
<p>打开自己本地的博客目录，在source文件夹下创建名为CNAME的文本文件。打开，输入自己的域名，格式为“xxx.com”，保存后使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure>
<p>部署到github。</p>
<p>至此，便可使用我们自己的域名进行访问了！</p>
<h2 id="图片存储"><a href="#图片存储" class="headerlink" title="图片存储"></a>图片存储</h2><p>可以使用<a href="https://portal.qiniu.com/" target="_blank" rel="external">七牛云存储</a></p>
<h2 id="Mac上好用的GIF图截屏工具"><a href="#Mac上好用的GIF图截屏工具" class="headerlink" title="Mac上好用的GIF图截屏工具"></a><a href="http://www.cockos.com/licecap/" target="_blank" rel="external">Mac上好用的GIF图截屏工具</a></h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;域名绑定&quot;&gt;&lt;a href=&quot;#域名绑定&quot; class=&quot;headerlink&quot; title=&quot;域名绑定&quot;&gt;&lt;/a&gt;域名绑定&lt;/h2&gt;
    
    </summary>
    
      <category term="装逼利器" scheme="http://lo-ol.cc/categories/%E8%A3%85%E9%80%BC%E5%88%A9%E5%99%A8/"/>
    
      <category term="Hexo" scheme="http://lo-ol.cc/categories/%E8%A3%85%E9%80%BC%E5%88%A9%E5%99%A8/Hexo/"/>
    
    
      <category term="博客" scheme="http://lo-ol.cc/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Hexo" scheme="http://lo-ol.cc/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用GithubPages-Hexo搭建免费博客（二）</title>
    <link href="http://lo-ol.cc/2016/02/26/%E4%BD%BF%E7%94%A8GithubPages-Hexo%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://lo-ol.cc/2016/02/26/使用GithubPages-Hexo搭建免费博客（二）/</id>
    <published>2016-02-26T08:37:14.000Z</published>
    <updated>2017-03-22T15:49:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>上篇讲到Hexo的安装，本篇继续，先来说说Hexo安装后的文件结构与功能。</p>
<a id="more"></a>
<h2 id="HEXO博客配置"><a href="#HEXO博客配置" class="headerlink" title="HEXO博客配置"></a>HEXO博客配置</h2><h4 id="1-Hexo设置"><a href="#1-Hexo设置" class="headerlink" title="1. Hexo设置"></a>1. Hexo设置</h4><p>打开根目录下的_config.yml文件</p>
<h5 id="1-1-站点配置"><a href="#1-1-站点配置" class="headerlink" title="1.1 站点配置"></a>1.1 站点配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1 # Site</div><div class="line">2 title: myblog   # 网站标题</div><div class="line">3 subtitle:      # 网站子标题</div><div class="line">4 description: 这是一个利用Hexo搭建的博客    # 网站描述</div><div class="line">5 author:  author   # 网站作者，也就是您的名字</div><div class="line">6 language: zh-cn   # 网站使用的语言        </div><div class="line">7 timezone:         # 网站时区。Hexo 预设使用您电脑的时区。</div></pre></td></tr></table></figure>
<h5 id="1-2-网址配置"><a href="#1-2-网址配置" class="headerlink" title="1.2 网址配置"></a>1.2 网址配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1 # URL</div><div class="line">2 url: http://xiaoxuetu.github.io         # 博客网址</div><div class="line">3 root: /                                 # 网站根目录</div><div class="line">4 permalink: :year/:month/:day/:title/    # 文章的永久链接格式   :year/:month/:day/:title/</div><div class="line">5 permalink_defaults:                     # 永久链接中各部分的默认值</div></pre></td></tr></table></figure>
<p><em>注意！ 如果你的网站存放在子目录中，例如 <a href="http://xiaoxuetu.github.io/blog" target="_blank" rel="external">http://xiaoxuetu.github.io/blog</a>, 则将url设为<a href="http://xiaoxuetu.github.io/blog，" target="_blank" rel="external">http://xiaoxuetu.github.io/blog，</a> 并且把 root 设为/blog/。</em></p>
<h5 id="1-3-目录配置"><a href="#1-3-目录配置" class="headerlink" title="1.3 目录配置"></a>1.3 目录配置</h5><p>一般直接取默认值不用修改。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">1 # Directory</div><div class="line">2 source_dir: source         # 资源文件夹，这个文件夹用来存放内容，例如我们用markdown编写的博文</div><div class="line">3 public_dir: public         # 公共文件夹，这个文件夹用于存放生成的静态博客文件。</div><div class="line">4 tag_dir: tags              # 标签文件夹</div><div class="line">5 archive_dir: archives      # 归档文件夹</div><div class="line">6 category_dir: categories   # 分类文件夹</div><div class="line">7 code_dir: downloads/code   # Include code 文件夹</div><div class="line">8 i18n_dir: :lang            # 国际化（i18n）文件夹</div><div class="line">9 skip_render:               # 跳过指定文件的渲染，您可使用 glob 来配置路径。</div></pre></td></tr></table></figure>
<h5 id="1-4-文章配置"><a href="#1-4-文章配置" class="headerlink" title="1.4 文章配置"></a>1.4 文章配置</h5><p>一般直接取默认值不用修改。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">1 # Writing</div><div class="line"> 2 new_post_name: :title.md    # 新文章的文件名称</div><div class="line"> 3 default_layout: post        # 预设布局</div><div class="line"> 4 titlecase: false            # 把标题转换为 titlecase（titlecase指的是将每个单词首字母转换成大写）</div><div class="line"> 5 external_link: true         # 在新标签中打开链接</div><div class="line"> 6 filename_case: 0            # 把文件名称转换为 (1) 小写或 (2) 大写, 0表示不变</div><div class="line"> 7 render_drafts: false        # 显示草稿</div><div class="line"> 8 post_asset_folder: false    # 启动 Asset 文件夹</div><div class="line"> 9 relative_link: false        # 把链接改为与根目录的相对位址</div><div class="line">10 future: true                # 显示未来的文章</div><div class="line">11 highlight:                  # 代码块的设置</div><div class="line">12   enable: true              </div><div class="line">13   line_number: true         # 是否显示行号</div><div class="line">14   auto_detect: true         # 是否自动监测</div><div class="line">15   tab_replace:              # 将 tab 替换成其他字符串</div></pre></td></tr></table></figure>
<h5 id="1-5-分类和标签配置"><a href="#1-5-分类和标签配置" class="headerlink" title="1.5 分类和标签配置"></a>1.5 分类和标签配置</h5><p>一般直接取默认值不用修改。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1 # Category &amp; Tag</div><div class="line">2 default_category: uncategorized    # 默认分类, uncategorized表示未分类</div><div class="line">3 category_map:                      # 分类别名</div><div class="line">4 tag_map:                           # 标签别名</div></pre></td></tr></table></figure>
<h5 id="1-6-日期-以及-时间格式-配置"><a href="#1-6-日期-以及-时间格式-配置" class="headerlink" title="1.6 日期 以及 时间格式 配置"></a>1.6 日期 以及 时间格式 配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1 date_format: YYYY-MM-DD           # 日期格式</div><div class="line">2 time_format: HH:mm:ss             # 时间格式</div></pre></td></tr></table></figure>
<h5 id="1-7-分页配置"><a href="#1-7-分页配置" class="headerlink" title="1.7 分页配置"></a>1.7 分页配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1 # Pagination</div><div class="line">2 per_page: 10                      # 每页显示的文章量，如果设置值为0，则表示禁止分野</div><div class="line">3 pagination_dir: page              # 分页目录</div></pre></td></tr></table></figure>
<h5 id="1-8-主题配置"><a href="#1-8-主题配置" class="headerlink" title="1.8 主题配置"></a>1.8 主题配置</h5><p>从这里开始，都是属于Hexo拓展插件的配置了。以下代码，主要是主题配置。更详细的主题替换，看第二节</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1 # Extensions</div><div class="line">2 theme: landscape    # 主题设置，默认是 landscape</div></pre></td></tr></table></figure>
<h5 id="1-9-部署配置"><a href="#1-9-部署配置" class="headerlink" title="1.9 部署配置"></a>1.9 部署配置</h5><p>这里主要用于将博客部署到github上，详细教程在后面。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1 # Deployment</div><div class="line">2 deploy:</div><div class="line">3   type:     # 设置发布类型，如git，rsync</div></pre></td></tr></table></figure>
<hr>
<h4 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h4><p>Hexo为我们提供了很多的主题供我们选择，网页在<a href="http://hexo.io/themes/" target="_blank" rel="external">这里</a> 我们可以自由选择自己喜欢的主题来进行设置。</p>
<p><a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">github主题列表地址</a></p>
<p>修改方法，就是将相应的主题clone到博客文件夹下的themes文件夹下，然后将上面1.8中的主题名字设置为相应的修改的名字。<br>我用的是这个：<a href="https://github.com/ppoffice/hexo-theme-hueman" target="_blank" rel="external">hexo-theme-hueman</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># Extensions</div><div class="line">## Themes: https://hexo.io/themes/</div><div class="line">theme: hexo-theme-hueman</div></pre></td></tr></table></figure>
<p>想要看到修改后的效果，可以在终端中继续执行以下命令。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo clean    </div><div class="line">hexo generate</div></pre></td></tr></table></figure>
<p>以上命令完成后，可以执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s</div></pre></td></tr></table></figure>
<blockquote>
<p>hexo s 等同于 hexo server , s 其实就是 server的缩写</p>
</blockquote>
<p>执行成功后，控制台将会输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure>
<p>用浏览器打开此站点，就可以看到我们用Hexo生成的网页。</p>
<h5 id="新建博文"><a href="#新建博文" class="headerlink" title="新建博文"></a>新建博文</h5><p>cd到博客文件的根目录下，使用以下命令，新建博客</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;title&quot;</div></pre></td></tr></table></figure>
<p>格式是： hexo new ｛文章名｝<br>命令执行成功后，你就会发现在 source/_posts 目录下多了一个文件 title.md 。</p>
<p>在文件夹下使用之前我们下载的markdown编辑器，打开这个文件，会看到以下内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">title: title</div><div class="line">date: </div><div class="line">tags:</div><div class="line">---</div></pre></td></tr></table></figure>
<p>含义是：</p>
<ul>
<li>title : 文章的标题</li>
<li>date : 该文章的创建时间</li>
<li>tags : 该文章的标记tag</li>
</ul>
<p>依据不同的主题，多标签的语法格式为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tags: </div><div class="line">    - 标签1</div><div class="line">    - 标签2</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tags: [标签1,标签2]</div></pre></td></tr></table></figure>
<p>你可以添加你所需要的变量，如果觉得每次生成后更改很麻烦，可以在模板文件夹scaffolds下找到post.md文件，编辑它的Front-matter为你想要的变量参数，默认新建博文使用的post模板。</p>
<h5 id="创建自己制定模板"><a href="#创建自己制定模板" class="headerlink" title="创建自己制定模板"></a>创建自己制定模板</h5><p>如果你想使用其他模板，你可以使用下列命令来创建指定模板的博文：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new scaffold &quot;title&quot;</div></pre></td></tr></table></figure>
<p>请确保使用的模板scaffold在scaffolds存在。</p>
<h5 id="文章摘要"><a href="#文章摘要" class="headerlink" title="文章摘要"></a>文章摘要</h5><p>这个功能很实用，可以让你在首页文章目录不必显示全部的文章内容，只显示指定摘要。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">以上是摘要</div><div class="line">&lt;!--more--&gt;</div><div class="line">以下是全文</div></pre></td></tr></table></figure>
<hr>
<p>使用markdown编辑好博文后，就可以执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate</div></pre></td></tr></table></figure>
<p>此命令主要用于部署网页的静态文件，每次修改后都应该首先执行此命令，来重新部署</p>
<p>然后继续执行“hexo s”启动服务。</p>
<p>至此，Hexo的网页部署全部完成，之后就是部署到github上了。</p>
<hr>
<h2 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h2><h5 id="1-注册账号"><a href="#1-注册账号" class="headerlink" title="1.注册账号"></a>1.注册账号</h5><p>如果有github账号的，可以忽略，没有请移步<a href="www.github.com">github</a>注册账号</p>
<h5 id="2-创建与你的github用户名对应的仓库"><a href="#2-创建与你的github用户名对应的仓库" class="headerlink" title="2.创建与你的github用户名对应的仓库"></a>2.创建与你的github用户名对应的仓库</h5><p>仓库名字必须为“username.github.io”， 其中“username”为你的用户名</p>
<p><img src="http://7xr7f9.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-03-02%20%E4%B8%8B%E5%8D%8810.38.37.png" alt=""></p>
<p>点击右上角的加号，创建new repository，然后输入“username.github.io”，点击创建。</p>
<h5 id="3-创建Github-Pages"><a href="#3-创建Github-Pages" class="headerlink" title="3.创建Github Pages"></a>3.创建Github Pages</h5><p>repository创建完成后进入以下界面</p>
<p><img src="http://7xr7f9.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-03-02%20%E4%B8%8B%E5%8D%8810.43.20.png" alt=""></p>
<p>点击最右边的Settings</p>
<p>进入后找到创建Github Pages的地方</p>
<p><img src="http://7xr7f9.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-03-02%20%E4%B8%8B%E5%8D%8810.45.28.png" alt=""></p>
<p>点击 Launch automatic page generator<br>最后生成主页：</p>
<p><img src="http://7xr7f9.com1.z0.glb.clouddn.com/github_pages_themes.png" alt=""></p>
<p>之后我们就可以直接访问“username.github.io”，去访问我们的博客了。</p>
<h5 id="4-配置git"><a href="#4-配置git" class="headerlink" title="4.配置git"></a>4.配置git</h5><p>由于mac自带git，所以直接打开终端进行设置</p>
<p>设置用户名密码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.email &quot;你的github邮箱&quot;</div><div class="line">git config --global user.name &quot;你的github用户名&quot;</div></pre></td></tr></table></figure>
<p>生成密钥</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;你的邮箱&quot;</div></pre></td></tr></table></figure>
<p>回车之后，打开Finder,前往文件夹[~/.ssh]中会看到生成的两个文件</p>
<blockquote>
<p>id_rsa    id_rsa.pub</p>
</blockquote>
<p>其中id_rsa是私钥，id_rsa.pub是龚玥</p>
<p>然后执行以下命令，添加生成的key</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-add id_rsa</div></pre></td></tr></table></figure>
<p>然后将id_rsa.pub中的内容复制下来，在我们github的主页中，点击个人的账户，找到settings–&gt;SSH keys，将我们复制的内容，添加在这里。title随便取个名字就好。</p>
<p>添加成功之后，可以在终端测试</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@github.com</div></pre></td></tr></table></figure>
<p>点击回车后输出内容中，最后一句话为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">You&apos;ve successfully authenticated, but github does not provide shell access.</div></pre></td></tr></table></figure>
<p>至此，验证成功。</p>
<h5 id="5-最后一步，将我们用Hexo生成的网页部署到github"><a href="#5-最后一步，将我们用Hexo生成的网页部署到github" class="headerlink" title="5.最后一步，将我们用Hexo生成的网页部署到github"></a>5.最后一步，将我们用Hexo生成的网页部署到github</h5><p>在我们的博客根目录下，打开站点配置文件<strong>_config.yml</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy: </div><div class="line">  type: git</div><div class="line">  repository: https://github.com/username/username.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<p>其中“username”为你github的用户名。</p>
<p>修改完保存后，就可以打开终端，cd到博客根目录，执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate #生成静态网页</div><div class="line">hexo deploy #部署到github</div></pre></td></tr></table></figure>
<p>之后输出以下信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INFO Deploy done: git</div></pre></td></tr></table></figure>
<p>说明我们的博客已经部署成功，github pages可能会存在延时，过几分钟后，就可以通过username.github.io去访问我们的博客了！</p>
<hr>
<p><em>本篇主要讲述了使用Hexo进行博客的搭建与配置，以及如何部署到github上，至此我们所有创建博客的工作已经完成。之后便是自己博客的编写与经营了，一些更深入的配置移步<a href="http://icehulu.com/2016/03/02/使用GithubPages-Hexo搭建免费博客（三）/" target="_blank" rel="external">第三篇</a>吧</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上篇讲到Hexo的安装，本篇继续，先来说说Hexo安装后的文件结构与功能。&lt;/p&gt;
    
    </summary>
    
      <category term="装逼利器" scheme="http://lo-ol.cc/categories/%E8%A3%85%E9%80%BC%E5%88%A9%E5%99%A8/"/>
    
      <category term="Hexo" scheme="http://lo-ol.cc/categories/%E8%A3%85%E9%80%BC%E5%88%A9%E5%99%A8/Hexo/"/>
    
    
      <category term="博客" scheme="http://lo-ol.cc/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Hexo" scheme="http://lo-ol.cc/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用GithubPages-Hexo搭建免费博客（一）</title>
    <link href="http://lo-ol.cc/2016/02/25/%E4%BD%BF%E7%94%A8GithubPages-Hexo%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://lo-ol.cc/2016/02/25/使用GithubPages-Hexo搭建免费博客（一）/</id>
    <published>2016-02-25T07:53:51.000Z</published>
    <updated>2017-03-22T16:10:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于MarkDown"><a href="#关于MarkDown" class="headerlink" title="关于MarkDown"></a>关于MarkDown</h3><p>Markdown 是一种用来写作的轻量级「标记语言」，它用简洁的语法代替排版，而不像一般我们用的字处理软件 Word 或 Pages 有大量的排版、字体设置。它使我们专心于码字，用「标记」语法，来代替常见的排版格式。</p>
<a id="more"></a>
<p>其详细的介绍，可以看下<a href="http://wowubuntu.com/markdown/#list" target="_blank" rel="external">Markdown 语法说明 (简体中文版)</a></p>
<h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul>
<li>专注你的文字内容，排版样式也只是需要键盘即可搞定</li>
<li>纯文本，兼容所有的文本编辑器与文字处理软件</li>
<li>可读，直观，简介，学习成本低</li>
</ul>
<p>#####<a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">Markdown使用示例</a></p>
<h5 id="书写工具"><a href="#书写工具" class="headerlink" title="书写工具"></a>书写工具</h5><p>Mac下有两款优秀的 Markdown 编辑器，<a href="http://25.io/mou/" target="_blank" rel="external">Mou</a>和<a href="http://macdown.uranusjr.com/" target="_blank" rel="external">MacDown</a></p>
<p><img src="http://25.io/mou/Mou_128.png" alt="Mou icon"><br><img src="http://macdown.uranusjr.com/static/base/img/logo-160.png" alt="MacDown logo"></p>
<h2 id="关于其优缺点，可以移步这里-至于选择哪款，看个人喜好。"><a href="#关于其优缺点，可以移步这里-至于选择哪款，看个人喜好。" class="headerlink" title="关于其优缺点，可以移步这里,至于选择哪款，看个人喜好。"></a>关于其优缺点，可以移步<a href="http://www.jianshu.com/p/6c157af09e84" target="_blank" rel="external">这里</a>,至于选择哪款，看个人喜好。</h2><h3 id="关于Hexo"><a href="#关于Hexo" class="headerlink" title="关于Hexo"></a>关于Hexo</h3><p>Hexo是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo官网</a></p>
<h3 id="关于GithubPages"><a href="#关于GithubPages" class="headerlink" title="关于GithubPages"></a>关于GithubPages</h3><p>在Github里面，每一个项目都拥有它的一个主页，列出项目的源文件，但是对于新手来说，看到那么多的源代码，只会让人感到头晕脑胀，无从下手，他更希望的是，该项目有一个简明易懂的页面，告诉他每一步要怎么去做。</p>
<p>因此，Github就设计了Github Pages这个功能，允许用户自定义项目首页，用来替代默认的源码列表。所以，Github Pages可以被认为是用户编写的、托管在github上的静态网页。</p>
<p>通过上面的介绍，大家对Hexo和Github已经有了大概的了解。<br>我们的方式就是，利用Markdown进行博客的编写，通过Hexo这个框架解析生成靓丽的静态页面，然后部署到Github上供大家浏览。</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul>
<li>硬件<br>此版本为Mac版👽</li>
<li>软件<ol>
<li>node.js</li>
<li>npm</li>
<li>hexo</li>
<li>github账号</li>
</ol>
</li>
</ul>
<h3 id="安装node-js与npm"><a href="#安装node-js与npm" class="headerlink" title="安装node.js与npm"></a>安装node.js与npm</h3><p>下载node.js 有多种方法：使用 <a href="http://brew.sh/index_zh-cn.html" target="_blank" rel="external">Homebrew</a> 下载 或者直接下载安装包。 建议 node.js 直接下载 安装包，因为使用 brew 有可能失败，会被墙掉。</p>
<p><a href="https://nodejs.org/en/download/" target="_blank" rel="external">node.js下载地址</a> </p>
<p><img src="http://7xr7f9.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-02-26%20%E4%B8%8B%E5%8D%883.37.18.png" alt=""></p>
<p>node.js 下载完成后 安装到电脑上就可以了。安装成功后显示出来安装路径，可以看到 安装node.js 的时候 npm 也安装了。</p>
<p>检测安装是否成功 终端输入 -v , 成功则显示版本号</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ node -v</div><div class="line">v4.3.1</div><div class="line">$ npm -v</div><div class="line">2.14.12</div></pre></td></tr></table></figure>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo</a></h3><p>文档里给出了详细的安装方法，只需要按其一步步来就好</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p>-v表示全局安装，所以需要使用管理员身份</p>
<p>安装成功，使用hexo 命令的时候，可能会出现以下错误</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123; [Error: Cannot find module &apos;./build/Release/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;    </div><div class="line">&#123; [Error: Cannot find module &apos;./build/default/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</div><div class="line">&#123; [Error: Cannot find module &apos;./build/Debug/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</div></pre></td></tr></table></figure>
<p>据说是由于GFW的问题，导致安装Hexo的时候少装了几个库。</p>
<p>查询出的解决方法为，使用以下命令行重新安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo –no-optional</div></pre></td></tr></table></figure>
<p>然而于我而言，并没有什么卵用。这个错误也没有造成任何影响，所以忽略，Go on。<br>完成后，验证下是否安装成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo -v</div></pre></td></tr></table></figure>
<h4 id="Hexo的使用"><a href="#Hexo的使用" class="headerlink" title="Hexo的使用"></a>Hexo的使用</h4><h5 id="1-创建存放博客的文件夹"><a href="#1-创建存放博客的文件夹" class="headerlink" title="1. 创建存放博客的文件夹"></a>1. 创建存放博客的文件夹</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mkdir myblog</div></pre></td></tr></table></figure>
<h5 id="2-执行以下命令，Hexo会在目标文件夹建立博客所需要的文件"><a href="#2-执行以下命令，Hexo会在目标文件夹建立博客所需要的文件" class="headerlink" title="2. 执行以下命令，Hexo会在目标文件夹建立博客所需要的文件"></a>2. 执行以下命令，Hexo会在目标文件夹建立博客所需要的文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure>
<p> 输出以下信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">INFO  Cloning hexo-starter to ~/Documents/mytest</div><div class="line">Cloning into &apos;/Users/Quncao/Documents/mytest&apos;...</div></pre></td></tr></table></figure>
<p>成功之后文件夹的样子<br><img src="http://7xr7f9.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-02-26%20%E4%B8%8B%E5%8D%884.13.00.png" alt=""></p>
<ul>
<li>_config.yml : Hexo和站点的配置文件，里面可以设置博客的名字、标题、作者、链接格式等相关项</li>
<li>scaffolds : 脚手架，用于存放我们创建文章时的模版</li>
<li>source : 用于存放我们用markdown编写的博文原文件、其他静态资源文件</li>
<li>themes : 用于存放主题，里面有我们博客的默认主题landscape</li>
</ul>
<h5 id="3-执行以下命令，进行依赖包的安装"><a href="#3-执行以下命令，进行依赖包的安装" class="headerlink" title="3. 执行以下命令，进行依赖包的安装"></a>3. 执行以下命令，进行依赖包的安装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install</div></pre></td></tr></table></figure>
<ul>
<li>node_modules: 关联保存了将会使用到的hexo依赖包</li>
</ul>
<h5 id="4-安装相关插件"><a href="#4-安装相关插件" class="headerlink" title="4. 安装相关插件"></a>4. 安装相关插件</h5><p>插件会安装至node_modules文件夹下，如果已经安装好的可以直接忽略</p>
<ul>
<li><p>安装便于自动部署到Github上的插件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
</li>
<li><p>安装atom生成插件，便于感兴趣的小伙伴们订阅</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-feed --save</div></pre></td></tr></table></figure>
</li>
<li><p>安装博客首页生成插件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-index --save</div></pre></td></tr></table></figure>
</li>
<li><p>安装归档生成插件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-archive --save</div></pre></td></tr></table></figure>
</li>
<li><p>安装tag生成插件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-tag --save</div></pre></td></tr></table></figure>
</li>
<li><p>安装category生成插件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-category --save</div></pre></td></tr></table></figure>
</li>
<li><p>安装Sitemap文件生成插件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-sitemap --save</div></pre></td></tr></table></figure>
</li>
<li><p>安装百度Sitemap文件生成插件，因为普通的Sitemap格式不符合百度的要求</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-baidu-sitemap --save</div></pre></td></tr></table></figure>
</li>
</ul>
<p>未完待续，继续请移步<a href="http://icehulu.com/2016/02/26/%E4%BD%BF%E7%94%A8GithubPages-Hexo%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/" target="_blank" rel="external">这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;关于MarkDown&quot;&gt;&lt;a href=&quot;#关于MarkDown&quot; class=&quot;headerlink&quot; title=&quot;关于MarkDown&quot;&gt;&lt;/a&gt;关于MarkDown&lt;/h3&gt;&lt;p&gt;Markdown 是一种用来写作的轻量级「标记语言」，它用简洁的语法代替排版，而不像一般我们用的字处理软件 Word 或 Pages 有大量的排版、字体设置。它使我们专心于码字，用「标记」语法，来代替常见的排版格式。&lt;/p&gt;
    
    </summary>
    
      <category term="装逼利器" scheme="http://lo-ol.cc/categories/%E8%A3%85%E9%80%BC%E5%88%A9%E5%99%A8/"/>
    
      <category term="Hexo" scheme="http://lo-ol.cc/categories/%E8%A3%85%E9%80%BC%E5%88%A9%E5%99%A8/Hexo/"/>
    
    
      <category term="博客" scheme="http://lo-ol.cc/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Hexo" scheme="http://lo-ol.cc/tags/Hexo/"/>
    
  </entry>
  
</feed>
